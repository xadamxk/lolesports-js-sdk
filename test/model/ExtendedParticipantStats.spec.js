/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LolesportsApi);
  }
}(this, function(expect, LolesportsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ExtendedParticipantStats', function() {
      beforeEach(function() {
        instance = new LolesportsApi.ExtendedParticipantStats();
      });

      it('should create an instance of ExtendedParticipantStats', function() {
        // TODO: update the code to test ExtendedParticipantStats
        expect(instance).to.be.a(LolesportsApi.ExtendedParticipantStats);
      });

      it('should have the property totalGoldEarned (base name: "totalGoldEarned")', function() {
        // TODO: update the code to test the property totalGoldEarned
        expect(instance).to.have.property('totalGoldEarned');
        // expect(instance.totalGoldEarned).to.be(expectedValueLiteral);
      });

      it('should have the property killParticipation (base name: "killParticipation")', function() {
        // TODO: update the code to test the property killParticipation
        expect(instance).to.have.property('killParticipation');
        // expect(instance.killParticipation).to.be(expectedValueLiteral);
      });

      it('should have the property championDamageShare (base name: "championDamageShare")', function() {
        // TODO: update the code to test the property championDamageShare
        expect(instance).to.have.property('championDamageShare');
        // expect(instance.championDamageShare).to.be(expectedValueLiteral);
      });

      it('should have the property wardsPlaced (base name: "wardsPlaced")', function() {
        // TODO: update the code to test the property wardsPlaced
        expect(instance).to.have.property('wardsPlaced');
        // expect(instance.wardsPlaced).to.be(expectedValueLiteral);
      });

      it('should have the property wardsDestroyed (base name: "wardsDestroyed")', function() {
        // TODO: update the code to test the property wardsDestroyed
        expect(instance).to.have.property('wardsDestroyed');
        // expect(instance.wardsDestroyed).to.be(expectedValueLiteral);
      });

      it('should have the property attackDamage (base name: "attackDamage")', function() {
        // TODO: update the code to test the property attackDamage
        expect(instance).to.have.property('attackDamage');
        // expect(instance.attackDamage).to.be(expectedValueLiteral);
      });

      it('should have the property abilityPower (base name: "abilityPower")', function() {
        // TODO: update the code to test the property abilityPower
        expect(instance).to.have.property('abilityPower');
        // expect(instance.abilityPower).to.be(expectedValueLiteral);
      });

      it('should have the property criticalChance (base name: "criticalChance")', function() {
        // TODO: update the code to test the property criticalChance
        expect(instance).to.have.property('criticalChance');
        // expect(instance.criticalChance).to.be(expectedValueLiteral);
      });

      it('should have the property attackSpeed (base name: "attackSpeed")', function() {
        // TODO: update the code to test the property attackSpeed
        expect(instance).to.have.property('attackSpeed');
        // expect(instance.attackSpeed).to.be(expectedValueLiteral);
      });

      it('should have the property lifeSteal (base name: "lifeSteal")', function() {
        // TODO: update the code to test the property lifeSteal
        expect(instance).to.have.property('lifeSteal');
        // expect(instance.lifeSteal).to.be(expectedValueLiteral);
      });

      it('should have the property armor (base name: "armor")', function() {
        // TODO: update the code to test the property armor
        expect(instance).to.have.property('armor');
        // expect(instance.armor).to.be(expectedValueLiteral);
      });

      it('should have the property magicResistance (base name: "magicResistance")', function() {
        // TODO: update the code to test the property magicResistance
        expect(instance).to.have.property('magicResistance');
        // expect(instance.magicResistance).to.be(expectedValueLiteral);
      });

      it('should have the property tenacity (base name: "tenacity")', function() {
        // TODO: update the code to test the property tenacity
        expect(instance).to.have.property('tenacity');
        // expect(instance.tenacity).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

      it('should have the property perkMetadata (base name: "perkMetadata")', function() {
        // TODO: update the code to test the property perkMetadata
        expect(instance).to.have.property('perkMetadata');
        // expect(instance.perkMetadata).to.be(expectedValueLiteral);
      });

      it('should have the property abilities (base name: "abilities")', function() {
        // TODO: update the code to test the property abilities
        expect(instance).to.have.property('abilities');
        // expect(instance.abilities).to.be(expectedValueLiteral);
      });

    });
  });

}));
