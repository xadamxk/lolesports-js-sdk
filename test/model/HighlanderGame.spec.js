/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LolesportsApi);
  }
}(this, function(expect, LolesportsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HighlanderGame', function() {
      beforeEach(function() {
        instance = new LolesportsApi.HighlanderGame();
      });

      it('should create an instance of HighlanderGame', function() {
        // TODO: update the code to test HighlanderGame
        expect(instance).to.be.a(LolesportsApi.HighlanderGame);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property generatedName (base name: "generatedName")', function() {
        // TODO: update the code to test the property generatedName
        expect(instance).to.have.property('generatedName');
        // expect(instance.generatedName).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property gameMode (base name: "gameMode")', function() {
        // TODO: update the code to test the property gameMode
        expect(instance).to.have.property('gameMode');
        // expect(instance.gameMode).to.be(expectedValueLiteral);
      });

      it('should have the property input (base name: "input")', function() {
        // TODO: update the code to test the property input
        expect(instance).to.have.property('input');
        // expect(instance.input).to.be(expectedValueLiteral);
      });

      it('should have the property standings (base name: "standings")', function() {
        // TODO: update the code to test the property standings
        expect(instance).to.have.property('standings');
        // expect(instance.standings).to.be(expectedValueLiteral);
      });

      it('should have the property scores (base name: "scores")', function() {
        // TODO: update the code to test the property scores
        expect(instance).to.have.property('scores');
        // expect(instance.scores).to.be(expectedValueLiteral);
      });

      it('should have the property gameId (base name: "gameId")', function() {
        // TODO: update the code to test the property gameId
        expect(instance).to.have.property('gameId');
        // expect(instance.gameId).to.be(expectedValueLiteral);
      });

      it('should have the property gameRealm (base name: "gameRealm")', function() {
        // TODO: update the code to test the property gameRealm
        expect(instance).to.have.property('gameRealm');
        // expect(instance.gameRealm).to.be(expectedValueLiteral);
      });

      it('should have the property platformId (base name: "platformId")', function() {
        // TODO: update the code to test the property platformId
        expect(instance).to.have.property('platformId');
        // expect(instance.platformId).to.be(expectedValueLiteral);
      });

      it('should have the property revision (base name: "revision")', function() {
        // TODO: update the code to test the property revision
        expect(instance).to.have.property('revision');
        // expect(instance.revision).to.be(expectedValueLiteral);
      });

      it('should have the property roles (base name: "roles")', function() {
        // TODO: update the code to test the property roles
        expect(instance).to.have.property('roles');
        // expect(instance.roles).to.be(expectedValueLiteral);
      });

    });
  });

}));
