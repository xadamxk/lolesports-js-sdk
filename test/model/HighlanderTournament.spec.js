/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LolesportsApi);
  }
}(this, function(expect, LolesportsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HighlanderTournament', function() {
      beforeEach(function() {
        instance = new LolesportsApi.HighlanderTournament();
      });

      it('should create an instance of HighlanderTournament', function() {
        // TODO: update the code to test HighlanderTournament
        expect(instance).to.be.a(LolesportsApi.HighlanderTournament);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property leagueReference (base name: "leagueReference")', function() {
        // TODO: update the code to test the property leagueReference
        expect(instance).to.have.property('leagueReference');
        // expect(instance.leagueReference).to.be(expectedValueLiteral);
      });

      it('should have the property roles (base name: "roles")', function() {
        // TODO: update the code to test the property roles
        expect(instance).to.have.property('roles');
        // expect(instance.roles).to.be(expectedValueLiteral);
      });

      it('should have the property bracketType (base name: "bracketType")', function() {
        // TODO: update the code to test the property bracketType
        expect(instance).to.have.property('bracketType');
        // expect(instance.bracketType).to.be(expectedValueLiteral);
      });

      it('should have the property matchType (base name: "matchType")', function() {
        // TODO: update the code to test the property matchType
        expect(instance).to.have.property('matchType');
        // expect(instance.matchType).to.be(expectedValueLiteral);
      });

      it('should have the property rosteringStrategy (base name: "rosteringStrategy")', function() {
        // TODO: update the code to test the property rosteringStrategy
        expect(instance).to.have.property('rosteringStrategy');
        // expect(instance.rosteringStrategy).to.be(expectedValueLiteral);
      });

      it('should have the property seedingStrategy (base name: "seedingStrategy")', function() {
        // TODO: update the code to test the property seedingStrategy
        expect(instance).to.have.property('seedingStrategy');
        // expect(instance.seedingStrategy).to.be(expectedValueLiteral);
      });

      it('should have the property queues (base name: "queues")', function() {
        // TODO: update the code to test the property queues
        expect(instance).to.have.property('queues');
        // expect(instance.queues).to.be(expectedValueLiteral);
      });

      it('should have the property rosters (base name: "rosters")', function() {
        // TODO: update the code to test the property rosters
        expect(instance).to.have.property('rosters');
        // expect(instance.rosters).to.be(expectedValueLiteral);
      });

      it('should have the property published (base name: "published")', function() {
        // TODO: update the code to test the property published
        expect(instance).to.have.property('published');
        // expect(instance.published).to.be(expectedValueLiteral);
      });

      it('should have the property breakpoints (base name: "breakpoints")', function() {
        // TODO: update the code to test the property breakpoints
        expect(instance).to.have.property('breakpoints');
        // expect(instance.breakpoints).to.be(expectedValueLiteral);
      });

      it('should have the property brackets (base name: "brackets")', function() {
        // TODO: update the code to test the property brackets
        expect(instance).to.have.property('brackets');
        // expect(instance.brackets).to.be(expectedValueLiteral);
      });

      it('should have the property standings (base name: "standings")', function() {
        // TODO: update the code to test the property standings
        expect(instance).to.have.property('standings');
        // expect(instance.standings).to.be(expectedValueLiteral);
      });

      it('should have the property liveMatches (base name: "liveMatches")', function() {
        // TODO: update the code to test the property liveMatches
        expect(instance).to.have.property('liveMatches');
        // expect(instance.liveMatches).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "startDate")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "endDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property platformIds (base name: "platformIds")', function() {
        // TODO: update the code to test the property platformIds
        expect(instance).to.have.property('platformIds');
        // expect(instance.platformIds).to.be(expectedValueLiteral);
      });

      it('should have the property gameIds (base name: "gameIds")', function() {
        // TODO: update the code to test the property gameIds
        expect(instance).to.have.property('gameIds');
        // expect(instance.gameIds).to.be(expectedValueLiteral);
      });

      it('should have the property leagueId (base name: "leagueId")', function() {
        // TODO: update the code to test the property leagueId
        expect(instance).to.have.property('leagueId');
        // expect(instance.leagueId).to.be(expectedValueLiteral);
      });

      it('should have the property league (base name: "league")', function() {
        // TODO: update the code to test the property league
        expect(instance).to.have.property('league');
        // expect(instance.league).to.be(expectedValueLiteral);
      });

    });
  });

}));
