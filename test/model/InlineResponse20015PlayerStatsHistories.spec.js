/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LolesportsApi);
  }
}(this, function(expect, LolesportsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse20015PlayerStatsHistories', function() {
      beforeEach(function() {
        instance = new LolesportsApi.InlineResponse20015PlayerStatsHistories();
      });

      it('should create an instance of InlineResponse20015PlayerStatsHistories', function() {
        // TODO: update the code to test InlineResponse20015PlayerStatsHistories
        expect(instance).to.be.a(LolesportsApi.InlineResponse20015PlayerStatsHistories);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property playerId (base name: "playerId")', function() {
        // TODO: update the code to test the property playerId
        expect(instance).to.have.property('playerId');
        // expect(instance.playerId).to.be(expectedValueLiteral);
      });

      it('should have the property championId (base name: "championId")', function() {
        // TODO: update the code to test the property championId
        expect(instance).to.have.property('championId');
        // expect(instance.championId).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property assists (base name: "assists")', function() {
        // TODO: update the code to test the property assists
        expect(instance).to.have.property('assists');
        // expect(instance.assists).to.be(expectedValueLiteral);
      });

      it('should have the property deaths (base name: "deaths")', function() {
        // TODO: update the code to test the property deaths
        expect(instance).to.have.property('deaths');
        // expect(instance.deaths).to.be(expectedValueLiteral);
      });

      it('should have the property kills (base name: "kills")', function() {
        // TODO: update the code to test the property kills
        expect(instance).to.have.property('kills');
        // expect(instance.kills).to.be(expectedValueLiteral);
      });

      it('should have the property csPerTenMinutes (base name: "csPerTenMinutes")', function() {
        // TODO: update the code to test the property csPerTenMinutes
        expect(instance).to.have.property('csPerTenMinutes');
        // expect(instance.csPerTenMinutes).to.be(expectedValueLiteral);
      });

      it('should have the property kdaRatio (base name: "kdaRatio")', function() {
        // TODO: update the code to test the property kdaRatio
        expect(instance).to.have.property('kdaRatio');
        // expect(instance.kdaRatio).to.be(expectedValueLiteral);
      });

      it('should have the property killParticipation (base name: "killParticipation")', function() {
        // TODO: update the code to test the property killParticipation
        expect(instance).to.have.property('killParticipation');
        // expect(instance.killParticipation).to.be(expectedValueLiteral);
      });

      it('should have the property win (base name: "win")', function() {
        // TODO: update the code to test the property win
        expect(instance).to.have.property('win');
        // expect(instance.win).to.be(expectedValueLiteral);
      });

      it('should have the property match (base name: "match")', function() {
        // TODO: update the code to test the property match
        expect(instance).to.have.property('match');
        // expect(instance.match).to.be(expectedValueLiteral);
      });

      it('should have the property team (base name: "team")', function() {
        // TODO: update the code to test the property team
        expect(instance).to.have.property('team');
        // expect(instance.team).to.be(expectedValueLiteral);
      });

      it('should have the property opponent (base name: "opponent")', function() {
        // TODO: update the code to test the property opponent
        expect(instance).to.have.property('opponent');
        // expect(instance.opponent).to.be(expectedValueLiteral);
      });

      it('should have the property game (base name: "game")', function() {
        // TODO: update the code to test the property game
        expect(instance).to.have.property('game');
        // expect(instance.game).to.be(expectedValueLiteral);
      });

    });
  });

}));
