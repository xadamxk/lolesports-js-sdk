/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LolesportsApi);
  }
}(this, function(expect, LolesportsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HighlanderTeam', function() {
      beforeEach(function() {
        instance = new LolesportsApi.HighlanderTeam();
      });

      it('should create an instance of HighlanderTeam', function() {
        // TODO: update the code to test HighlanderTeam
        expect(instance).to.be.a(LolesportsApi.HighlanderTeam);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property slug (base name: "slug")', function() {
        // TODO: update the code to test the property slug
        expect(instance).to.have.property('slug');
        // expect(instance.slug).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property guid (base name: "guid")', function() {
        // TODO: update the code to test the property guid
        expect(instance).to.have.property('guid');
        // expect(instance.guid).to.be(expectedValueLiteral);
      });

      it('should have the property teamPhotoUrl (base name: "teamPhotoUrl")', function() {
        // TODO: update the code to test the property teamPhotoUrl
        expect(instance).to.have.property('teamPhotoUrl');
        // expect(instance.teamPhotoUrl).to.be(expectedValueLiteral);
      });

      it('should have the property logoUrl (base name: "logoUrl")', function() {
        // TODO: update the code to test the property logoUrl
        expect(instance).to.have.property('logoUrl');
        // expect(instance.logoUrl).to.be(expectedValueLiteral);
      });

      it('should have the property acronym (base name: "acronym")', function() {
        // TODO: update the code to test the property acronym
        expect(instance).to.have.property('acronym');
        // expect(instance.acronym).to.be(expectedValueLiteral);
      });

      it('should have the property homeLeague (base name: "homeLeague")', function() {
        // TODO: update the code to test the property homeLeague
        expect(instance).to.have.property('homeLeague');
        // expect(instance.homeLeague).to.be(expectedValueLiteral);
      });

      it('should have the property altLogoUrl (base name: "altLogoUrl")', function() {
        // TODO: update the code to test the property altLogoUrl
        expect(instance).to.have.property('altLogoUrl');
        // expect(instance.altLogoUrl).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property bios (base name: "bios")', function() {
        // TODO: update the code to test the property bios
        expect(instance).to.have.property('bios');
        // expect(instance.bios).to.be(expectedValueLiteral);
      });

      it('should have the property foreignIds (base name: "foreignIds")', function() {
        // TODO: update the code to test the property foreignIds
        expect(instance).to.have.property('foreignIds');
        // expect(instance.foreignIds).to.be(expectedValueLiteral);
      });

      it('should have the property players (base name: "players")', function() {
        // TODO: update the code to test the property players
        expect(instance).to.have.property('players');
        // expect(instance.players).to.be(expectedValueLiteral);
      });

      it('should have the property starters (base name: "starters")', function() {
        // TODO: update the code to test the property starters
        expect(instance).to.have.property('starters');
        // expect(instance.starters).to.be(expectedValueLiteral);
      });

      it('should have the property subs (base name: "subs")', function() {
        // TODO: update the code to test the property subs
        expect(instance).to.have.property('subs');
        // expect(instance.subs).to.be(expectedValueLiteral);
      });

    });
  });

}));
