/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The PerkMetadata model module.
 * @module model/PerkMetadata
 * @version 1.0.0-alpha-1
 */
export class PerkMetadata {
  /**
   * Constructs a new <code>PerkMetadata</code>.
   * @alias module:model/PerkMetadata
   * @class
   * @param styleId {module:model/PerkMetadata.StyleIdEnum} The id of the primary rune path 
   * @param subStyleId {module:model/PerkMetadata.SubStyleIdEnum} The id of the secondary rune path 
   * @param perks {Array.<Number>} The runes selected.  Index 0 - 3 are the ids of the primary runes Index 4 - 5 are the ids of the secondary runes Index 6 - 8 are the ids of the stats shard 
   */
  constructor(styleId, subStyleId, perks) {
    this.styleId = styleId;
    this.subStyleId = subStyleId;
    this.perks = perks;
  }

  /**
   * Constructs a <code>PerkMetadata</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PerkMetadata} obj Optional instance to populate.
   * @return {module:model/PerkMetadata} The populated <code>PerkMetadata</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PerkMetadata();
      if (data.hasOwnProperty('styleId'))
        obj.styleId = ApiClient.convertToType(data['styleId'], 'Number');
      if (data.hasOwnProperty('subStyleId'))
        obj.subStyleId = ApiClient.convertToType(data['subStyleId'], 'Number');
      if (data.hasOwnProperty('perks'))
        obj.perks = ApiClient.convertToType(data['perks'], ['Number']);
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>styleId</code> property.
 * @enum {Number}
 * @readonly
 */
PerkMetadata.StyleIdEnum = {
  /**
   * value: 8000
   * @const
   */
  _8000: 8000,

  /**
   * value: 8100
   * @const
   */
  _8100: 8100,

  /**
   * value: 8200
   * @const
   */
  _8200: 8200,

  /**
   * value: 8300
   * @const
   */
  _8300: 8300,

  /**
   * value: 8400
   * @const
   */
  _8400: 8400
};
/**
 * The id of the primary rune path 
 * @member {module:model/PerkMetadata.StyleIdEnum} styleId
 */
PerkMetadata.prototype.styleId = undefined;

/**
 * Allowed values for the <code>subStyleId</code> property.
 * @enum {Number}
 * @readonly
 */
PerkMetadata.SubStyleIdEnum = {
  /**
   * value: 8000
   * @const
   */
  _8000: 8000,

  /**
   * value: 8100
   * @const
   */
  _8100: 8100,

  /**
   * value: 8200
   * @const
   */
  _8200: 8200,

  /**
   * value: 8300
   * @const
   */
  _8300: 8300,

  /**
   * value: 8400
   * @const
   */
  _8400: 8400
};
/**
 * The id of the secondary rune path 
 * @member {module:model/PerkMetadata.SubStyleIdEnum} subStyleId
 */
PerkMetadata.prototype.subStyleId = undefined;

/**
 * The runes selected.  Index 0 - 3 are the ids of the primary runes Index 4 - 5 are the ids of the secondary runes Index 6 - 8 are the ids of the stats shard 
 * @member {Array.<Number>} perks
 */
PerkMetadata.prototype.perks = undefined;

