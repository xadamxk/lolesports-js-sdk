/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Ranking model module.
 * @module model/Ranking
 * @version 1.0.0-alpha-1
 */
export class Ranking {
  /**
   * Constructs a new <code>Ranking</code>.
   * @alias module:model/Ranking
   * @class
   * @param ordinal {Number} The league position
   * @param teams {Array.<Object>} The teams that are at that league position.  In most cases there will only be one team object in this array. In cases where several teams are tied with the same score, this array will contain all teams tied for that position. 
   */
  constructor(ordinal, teams) {
    this.ordinal = ordinal;
    this.teams = teams;
  }

  /**
   * Constructs a <code>Ranking</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Ranking} obj Optional instance to populate.
   * @return {module:model/Ranking} The populated <code>Ranking</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Ranking();
      if (data.hasOwnProperty('ordinal'))
        obj.ordinal = ApiClient.convertToType(data['ordinal'], 'Number');
      if (data.hasOwnProperty('teams'))
        obj.teams = ApiClient.convertToType(data['teams'], [AllOfrankingTeamsItems]);
    }
    return obj;
  }
}

/**
 * The league position
 * @member {Number} ordinal
 */
Ranking.prototype.ordinal = undefined;

/**
 * The teams that are at that league position.  In most cases there will only be one team object in this array. In cases where several teams are tied with the same score, this array will contain all teams tied for that position. 
 * @member {Array.<Object>} teams
 */
Ranking.prototype.teams = undefined;

