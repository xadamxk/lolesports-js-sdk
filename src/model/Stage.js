/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Section} from './Section';

/**
 * The Stage model module.
 * @module model/Stage
 * @version 1.0.0-alpha-1
 */
export class Stage {
  /**
   * Constructs a new <code>Stage</code>.
   * Represents a stage in a tournament.  Whether it is the group or knockout stage. 
   * @alias module:model/Stage
   * @class
   * @param name {String} The name of that stage of the tournament
   * @param type {module:model/Stage.TypeEnum} The type of the stage.
   * @param slug {String} 
   * @param sections {Array.<module:model/Section>} Each object in the array represents a particular round in that specific stage in the tournament.  For the knockout stages, we could have the quarter finals, semi finals and the finals under their own sections.  For the group stage, there is usually only one section. 
   */
  constructor(name, type, slug, sections) {
    this.name = name;
    this.type = type;
    this.slug = slug;
    this.sections = sections;
  }

  /**
   * Constructs a <code>Stage</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Stage} obj Optional instance to populate.
   * @return {module:model/Stage} The populated <code>Stage</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Stage();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('slug'))
        obj.slug = ApiClient.convertToType(data['slug'], 'String');
      if (data.hasOwnProperty('sections'))
        obj.sections = ApiClient.convertToType(data['sections'], [Section]);
    }
    return obj;
  }
}

/**
 * The name of that stage of the tournament
 * @member {String} name
 */
Stage.prototype.name = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Stage.TypeEnum = {
  /**
   * value: "groups"
   * @const
   */
  groups: "groups",

  /**
   * value: "bracket"
   * @const
   */
  bracket: "bracket"
};
/**
 * The type of the stage.
 * @member {module:model/Stage.TypeEnum} type
 */
Stage.prototype.type = undefined;

/**
 * @member {String} slug
 */
Stage.prototype.slug = undefined;

/**
 * Each object in the array represents a particular round in that specific stage in the tournament.  For the knockout stages, we could have the quarter finals, semi finals and the finals under their own sections.  For the group stage, there is usually only one section. 
 * @member {Array.<module:model/Section>} sections
 */
Stage.prototype.sections = undefined;

