/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {GameMode} from './GameMode';
import {HighlanderGame} from './HighlanderGame';
import {MatchType} from './MatchType';
import {Roles} from './Roles';
import {Scores} from './Scores';
import {Scoring} from './Scoring';
import {Standings} from './Standings';
import {AllOfhighlanderMatchInputItems} from './AllOfhighlanderMatchInputItems';

/**
 * The HighlanderMatch model module.
 * @module model/HighlanderMatch
 * @version 1.0.0-alpha-1
 */
export class HighlanderMatch {
  /**
   * Constructs a new <code>HighlanderMatch</code>.
   * @alias module:model/HighlanderMatch
   * @class
   * @param id {String} The match ID
   * @param name {String} 
   * @param position {Number} 
   * @param state {module:model/HighlanderMatch.StateEnum} Whether it is ongoing or completed. 
   * @param groupPosition {Number} 
   * @param input {Array.<Object>} 
   * @param games {Object.<String, module:model/HighlanderGame>} The keys to this object are [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier) representing the game ID.  These are the games played in that series.  The number of properties(key and value pair) in this object will be equal to the type of series that was played. For a best of 1 there will be only 1 game, 3 for best of 3s and 5 for best of 5s. 
   * @param tiebreaker {Boolean} 
   * @param remadeGames {Array.<module:model/HighlanderGame>} 
   * @param roles {module:model/Roles} 
   * @param scores {module:model/Scores} 
   */
  constructor(id, name, position, state, groupPosition, input, games, tiebreaker, remadeGames, roles, scores) {
    this.id = id;
    this.name = name;
    this.position = position;
    this.state = state;
    this.groupPosition = groupPosition;
    this.input = input;
    this.games = games;
    this.tiebreaker = tiebreaker;
    this.remadeGames = remadeGames;
    this.roles = roles;
    this.scores = scores;
  }

  /**
   * Constructs a <code>HighlanderMatch</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/HighlanderMatch} obj Optional instance to populate.
   * @return {module:model/HighlanderMatch} The populated <code>HighlanderMatch</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new HighlanderMatch();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('position'))
        obj.position = ApiClient.convertToType(data['position'], 'Number');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('groupPosition'))
        obj.groupPosition = ApiClient.convertToType(data['groupPosition'], 'Number');
      if (data.hasOwnProperty('matchType'))
        obj.matchType = MatchType.constructFromObject(data['matchType']);
      if (data.hasOwnProperty('gameMode'))
        obj.gameMode = GameMode.constructFromObject(data['gameMode']);
      if (data.hasOwnProperty('input'))
        obj.input = ApiClient.convertToType(data['input'], [AllOfhighlanderMatchInputItems]);
      if (data.hasOwnProperty('games'))
        obj.games = ApiClient.convertToType(data['games'], {'String': HighlanderGame});
      if (data.hasOwnProperty('standings'))
        obj.standings = Standings.constructFromObject(data['standings']);
      if (data.hasOwnProperty('tiebreaker'))
        obj.tiebreaker = ApiClient.convertToType(data['tiebreaker'], 'Boolean');
      if (data.hasOwnProperty('remadeGames'))
        obj.remadeGames = ApiClient.convertToType(data['remadeGames'], [HighlanderGame]);
      if (data.hasOwnProperty('roles'))
        obj.roles = Roles.constructFromObject(data['roles']);
      if (data.hasOwnProperty('scoring'))
        obj.scoring = Scoring.constructFromObject(data['scoring']);
      if (data.hasOwnProperty('scores'))
        obj.scores = Scores.constructFromObject(data['scores']);
    }
    return obj;
  }
}

/**
 * The match ID
 * @member {String} id
 */
HighlanderMatch.prototype.id = undefined;

/**
 * @member {String} name
 */
HighlanderMatch.prototype.name = undefined;

/**
 * @member {Number} position
 */
HighlanderMatch.prototype.position = undefined;

/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
HighlanderMatch.StateEnum = {
  /**
   * value: "resolved"
   * @const
   */
  resolved: "resolved",

  /**
   * value: "unresolved"
   * @const
   */
  unresolved: "unresolved",

  /**
   * value: "unlinked"
   * @const
   */
  unlinked: "unlinked"
};
/**
 * Whether it is ongoing or completed. 
 * @member {module:model/HighlanderMatch.StateEnum} state
 */
HighlanderMatch.prototype.state = undefined;

/**
 * @member {Number} groupPosition
 */
HighlanderMatch.prototype.groupPosition = undefined;

/**
 * @member {module:model/MatchType} matchType
 */
HighlanderMatch.prototype.matchType = undefined;

/**
 * @member {module:model/GameMode} gameMode
 */
HighlanderMatch.prototype.gameMode = undefined;

/**
 * @member {Array.<Object>} input
 */
HighlanderMatch.prototype.input = undefined;

/**
 * The keys to this object are [UUID version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier) representing the game ID.  These are the games played in that series.  The number of properties(key and value pair) in this object will be equal to the type of series that was played. For a best of 1 there will be only 1 game, 3 for best of 3s and 5 for best of 5s. 
 * @member {Object.<String, module:model/HighlanderGame>} games
 */
HighlanderMatch.prototype.games = undefined;

/**
 * @member {module:model/Standings} standings
 */
HighlanderMatch.prototype.standings = undefined;

/**
 * @member {Boolean} tiebreaker
 */
HighlanderMatch.prototype.tiebreaker = undefined;

/**
 * @member {Array.<module:model/HighlanderGame>} remadeGames
 */
HighlanderMatch.prototype.remadeGames = undefined;

/**
 * @member {module:model/Roles} roles
 */
HighlanderMatch.prototype.roles = undefined;

/**
 * @member {module:model/Scoring} scoring
 */
HighlanderMatch.prototype.scoring = undefined;

/**
 * @member {module:model/Scores} scores
 */
HighlanderMatch.prototype.scores = undefined;

