/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ForeignIds} from './ForeignIds';

/**
 * The HighlanderTeam model module.
 * @module model/HighlanderTeam
 * @version 1.0.0-alpha-1
 */
export class HighlanderTeam {
  /**
   * Constructs a new <code>HighlanderTeam</code>.
   * @alias module:model/HighlanderTeam
   * @class
   * @param id {Number} The team ID.
   * @param slug {String} URL friendly version of the team name.
   * @param name {String} The team name.
   * @param guid {String} The team's [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   * @param teamPhotoUrl {String} 
   * @param logoUrl {String} URL to an image of the team's logo.
   * @param acronym {String} The acronym form of the team name
   * @param homeLeague {String} Describes the league this team participates in during the regular seasons. 
   * @param altLogoUrl {String} Alternative URL to the team's logo.
   * @param createdAt {Date} The date and time when this entry was created.
   * @param updatedAt {Date} The date and time when this entry was last updated.
   * @param bios {Object.<String, String>} Contains a description of the team translated to various languages.  The keys are presented in the format ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))  `{languageCode}_{countryCode}`  The value is a string containing html tags representing the description in that specific locale. 
   * @param foreignIds {module:model/ForeignIds} 
   * @param players {Array.<Number>} An array containing the player IDs for those belonging in that team.
   * @param starters {Array.<Number>} An array of the player IDs of those in the main roster
   * @param subs {Array.<Number>} An array of the player IDs of the subs.
   */
  constructor(id, slug, name, guid, teamPhotoUrl, logoUrl, acronym, homeLeague, altLogoUrl, createdAt, updatedAt, bios, foreignIds, players, starters, subs) {
    this.id = id;
    this.slug = slug;
    this.name = name;
    this.guid = guid;
    this.teamPhotoUrl = teamPhotoUrl;
    this.logoUrl = logoUrl;
    this.acronym = acronym;
    this.homeLeague = homeLeague;
    this.altLogoUrl = altLogoUrl;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.bios = bios;
    this.foreignIds = foreignIds;
    this.players = players;
    this.starters = starters;
    this.subs = subs;
  }

  /**
   * Constructs a <code>HighlanderTeam</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/HighlanderTeam} obj Optional instance to populate.
   * @return {module:model/HighlanderTeam} The populated <code>HighlanderTeam</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new HighlanderTeam();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('slug'))
        obj.slug = ApiClient.convertToType(data['slug'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('guid'))
        obj.guid = ApiClient.convertToType(data['guid'], 'String');
      if (data.hasOwnProperty('teamPhotoUrl'))
        obj.teamPhotoUrl = ApiClient.convertToType(data['teamPhotoUrl'], 'String');
      if (data.hasOwnProperty('logoUrl'))
        obj.logoUrl = ApiClient.convertToType(data['logoUrl'], 'String');
      if (data.hasOwnProperty('acronym'))
        obj.acronym = ApiClient.convertToType(data['acronym'], 'String');
      if (data.hasOwnProperty('homeLeague'))
        obj.homeLeague = ApiClient.convertToType(data['homeLeague'], 'String');
      if (data.hasOwnProperty('altLogoUrl'))
        obj.altLogoUrl = ApiClient.convertToType(data['altLogoUrl'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'Date');
      if (data.hasOwnProperty('bios'))
        obj.bios = ApiClient.convertToType(data['bios'], {'String': 'String'});
      if (data.hasOwnProperty('foreignIds'))
        obj.foreignIds = ForeignIds.constructFromObject(data['foreignIds']);
      if (data.hasOwnProperty('players'))
        obj.players = ApiClient.convertToType(data['players'], ['Number']);
      if (data.hasOwnProperty('starters'))
        obj.starters = ApiClient.convertToType(data['starters'], ['Number']);
      if (data.hasOwnProperty('subs'))
        obj.subs = ApiClient.convertToType(data['subs'], ['Number']);
    }
    return obj;
  }
}

/**
 * The team ID.
 * @member {Number} id
 */
HighlanderTeam.prototype.id = undefined;

/**
 * URL friendly version of the team name.
 * @member {String} slug
 */
HighlanderTeam.prototype.slug = undefined;

/**
 * The team name.
 * @member {String} name
 */
HighlanderTeam.prototype.name = undefined;

/**
 * The team's [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
 * @member {String} guid
 */
HighlanderTeam.prototype.guid = undefined;

/**
 * @member {String} teamPhotoUrl
 */
HighlanderTeam.prototype.teamPhotoUrl = undefined;

/**
 * URL to an image of the team's logo.
 * @member {String} logoUrl
 */
HighlanderTeam.prototype.logoUrl = undefined;

/**
 * The acronym form of the team name
 * @member {String} acronym
 */
HighlanderTeam.prototype.acronym = undefined;

/**
 * Describes the league this team participates in during the regular seasons. 
 * @member {String} homeLeague
 */
HighlanderTeam.prototype.homeLeague = undefined;

/**
 * Alternative URL to the team's logo.
 * @member {String} altLogoUrl
 */
HighlanderTeam.prototype.altLogoUrl = undefined;

/**
 * The date and time when this entry was created.
 * @member {Date} createdAt
 */
HighlanderTeam.prototype.createdAt = undefined;

/**
 * The date and time when this entry was last updated.
 * @member {Date} updatedAt
 */
HighlanderTeam.prototype.updatedAt = undefined;

/**
 * Contains a description of the team translated to various languages.  The keys are presented in the format ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))  `{languageCode}_{countryCode}`  The value is a string containing html tags representing the description in that specific locale. 
 * @member {Object.<String, String>} bios
 */
HighlanderTeam.prototype.bios = undefined;

/**
 * @member {module:model/ForeignIds} foreignIds
 */
HighlanderTeam.prototype.foreignIds = undefined;

/**
 * An array containing the player IDs for those belonging in that team.
 * @member {Array.<Number>} players
 */
HighlanderTeam.prototype.players = undefined;

/**
 * An array of the player IDs of those in the main roster
 * @member {Array.<Number>} starters
 */
HighlanderTeam.prototype.starters = undefined;

/**
 * An array of the player IDs of the subs.
 * @member {Array.<Number>} subs
 */
HighlanderTeam.prototype.subs = undefined;

