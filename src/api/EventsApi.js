/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2005} from '../model/InlineResponse2005';
import {InlineResponse2006} from '../model/InlineResponse2006';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {Locale} from '../model/Locale';

/**
* Events service.
* @module api/EventsApi
* @version 1.0.0-alpha-1
*/
export class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getCompletedEvents operation.
     * @callback moduleapi/EventsApi~getCompletedEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Locale} hl 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.tournamentId The id(s) of the tournament(s) you want details ofs 
     * @param {module:api/EventsApi~getCompletedEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCompletedEvents(hl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hl' is set
      if (hl === undefined || hl === null) {
        throw new Error("Missing the required parameter 'hl' when calling getCompletedEvents");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'hl': hl,'tournamentId': this.apiClient.buildCollectionParam(opts['tournamentId'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/getCompletedEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventDetails operation.
     * @callback moduleapi/EventsApi~getEventDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Locale} hl 
     * @param {Number} id The id of the match that you want 
     * @param {module:api/EventsApi~getEventDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventDetails(hl, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'hl' is set
      if (hl === undefined || hl === null) {
        throw new Error("Missing the required parameter 'hl' when calling getEventDetails");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEventDetails");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'hl': hl,'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/getEventDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGames operation.
     * @callback moduleapi/EventsApi~getGamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Locale} hl 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.id The game Id(s).  You can input more than one game Id(s). 
     * @param {module:api/EventsApi~getGamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGames(hl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hl' is set
      if (hl === undefined || hl === null) {
        throw new Error("Missing the required parameter 'hl' when calling getGames");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'hl': hl,'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/getGames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLive operation.
     * @callback moduleapi/EventsApi~getLiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Locale} hl 
     * @param {module:api/EventsApi~getLiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLive(hl, callback) {
      
      let postBody = null;
      // verify the required parameter 'hl' is set
      if (hl === undefined || hl === null) {
        throw new Error("Missing the required parameter 'hl' when calling getLive");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'hl': hl
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/getLive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSchedule operation.
     * @callback moduleapi/EventsApi~getScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Locale} hl 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.leagueId The id(s) of the league(s) you want details of 
     * @param {Blob} opts.pageToken Base 64 encoded string used to determine the next \&quot;page\&quot; of data to pull 
     * @param {module:api/EventsApi~getScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSchedule(hl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hl' is set
      if (hl === undefined || hl === null) {
        throw new Error("Missing the required parameter 'hl' when calling getSchedule");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'hl': hl,'leagueId': this.apiClient.buildCollectionParam(opts['leagueId'], 'multi'),'pageToken': opts['pageToken']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/getSchedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}