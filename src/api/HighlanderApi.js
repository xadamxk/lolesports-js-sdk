/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {HighlanderTournaments} from '../model/HighlanderTournaments';
import {InlineResponse20010} from '../model/InlineResponse20010';
import {InlineResponse20011} from '../model/InlineResponse20011';
import {InlineResponse20012} from '../model/InlineResponse20012';
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse20014} from '../model/InlineResponse20014';
import {InlineResponse20015} from '../model/InlineResponse20015';
import {InlineResponse404} from '../model/InlineResponse404';
import {InlineResponse4041} from '../model/InlineResponse4041';
import {Query} from '../model/Query';

/**
* Highlander service.
* @module api/HighlanderApi
* @version 1.0.0-alpha-1
*/
export class HighlanderApi {

    /**
    * Constructs a new HighlanderApi. 
    * @alias module:api/HighlanderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the highlanderTournaments operation.
     * @callback moduleapi/HighlanderApi~highlanderTournamentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HighlanderTournaments{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If a league does not have highlanderTournament objects, the API will return 404 
     * @param {String} league The id of the league you want details of
     * @param {module:api/HighlanderApi~highlanderTournamentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    highlanderTournaments(league, callback) {
      
      let postBody = null;
      // verify the required parameter 'league' is set
      if (league === undefined || league === null) {
        throw new Error("Missing the required parameter 'league' when calling highlanderTournaments");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'league': league
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HighlanderTournaments;

      return this.apiClient.callApi(
        '/highlanderTournaments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the leagues operation.
     * @callback moduleapi/HighlanderApi~leaguesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Query} query &#x27;This endpoint requires either the id or the slug to be passed. If both are present then only the first one will be considered.  _Due to a limitation in the OpenApi specification it is not possible to show the mutual exclusive nature that the query parameters in this endpoint require. The schema below is as close as a representation I could get in expressing the nature of the query parameters._  Check the examples below to help better understand the query parameters needed.  **Example 1**  &#x60;https://api.lolesports.com/api/v1/leagues?id&#x3D;3&#x60;  This will return the details for **LEC**.  **Example 2**  &#x60;https://api.lolesports.com/api/v1/leagues?slug&#x3D;worlds&#x60;  This will return the details for **Worlds**  **Example 3**  &#x60;https://api.lolesports.com/api/v1/leagues?id&#x3D;3&amp;slug&#x3D;worlds&#x60;  In such a scenario where both query parameters are used only the first will be considered, hence it will only return the details for **LEC**.  **Example 4**  &#x60;https://api.lolesports.com/api/v1/leagues&#x60;  This is not valid. At least one of the two query parameters (id or slug) is required.&#x27; 
     * @param {module:api/HighlanderApi~leaguesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    leagues(query, callback) {
      
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling leagues");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/leagues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the navItems operation.
     * @callback moduleapi/HighlanderApi~navItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/HighlanderApi~navItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    navItems(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/navItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the players operation.
     * @callback moduleapi/HighlanderApi~playersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If the &#x60;playerStatsSummaries&#x60; and &#x60;playerStatsHistories&#x60; keys are not present, then the player did not take part in that particular tournament. 
     * @param {String} slug The player slug.
     * @param {String} tournament The tournament ID.
     * @param {module:api/HighlanderApi~playersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    players(slug, tournament, callback) {
      
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling players");
      }
      // verify the required parameter 'tournament' is set
      if (tournament === undefined || tournament === null) {
        throw new Error("Missing the required parameter 'tournament' when calling players");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'slug': slug,'tournament': tournament
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the scheduleItems operation.
     * @callback moduleapi/HighlanderApi~scheduleItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} leagueId The id of the league you want details of
     * @param {module:api/HighlanderApi~scheduleItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    scheduleItems(leagueId, callback) {
      
      let postBody = null;
      // verify the required parameter 'leagueId' is set
      if (leagueId === undefined || leagueId === null) {
        throw new Error("Missing the required parameter 'leagueId' when calling scheduleItems");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'leagueId': leagueId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/scheduleItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teams operation.
     * @callback moduleapi/HighlanderApi~teamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If the &#x60;teamStatsSummaries&#x60;, &#x60;teamRosterStats&#x60; and &#x60;teamStatsHistories&#x60; keys are not present, then the team did not take part in that particular tournament. 
     * @param {String} slug The team slug.
     * @param {String} tournament The tournament ID.
     * @param {module:api/HighlanderApi~teamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teams(slug, tournament, callback) {
      
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling teams");
      }
      // verify the required parameter 'tournament' is set
      if (tournament === undefined || tournament === null) {
        throw new Error("Missing the required parameter 'tournament' when calling teams");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'slug': slug,'tournament': tournament
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the videos operation.
     * @callback moduleapi/HighlanderApi~videosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint returns details about esports vods on YouTube.  The data returned by this endpoint is fairly large (more than 5MB) since it includes vods from 2015 up to (at the time of writing this) June 2019 and it will continue growing.  Do consider this when dealing with clients (like mobile phones) where bandwidth and memory may be scarce.  It is highly advised that you cache the data from this endpoint. 
     * @param {module:api/HighlanderApi~videosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    videos(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}