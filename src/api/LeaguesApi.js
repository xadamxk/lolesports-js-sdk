/*
 * Lolesports Api
 * Unofficial documentation to the lolesports Api
 *
 * OpenAPI spec version: 1.0.0-alpha-1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse2003} from '../model/InlineResponse2003';
import {InlineResponse2004} from '../model/InlineResponse2004';
import {Locale} from '../model/Locale';

/**
* Leagues service.
* @module api/LeaguesApi
* @version 1.0.0-alpha-1
*/
export class LeaguesApi {

    /**
    * Constructs a new LeaguesApi. 
    * @alias module:api/LeaguesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getLeagues operation.
     * @callback moduleapi/LeaguesApi~getLeaguesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Locale} hl 
     * @param {module:api/LeaguesApi~getLeaguesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLeagues(hl, callback) {
      
      let postBody = null;
      // verify the required parameter 'hl' is set
      if (hl === undefined || hl === null) {
        throw new Error("Missing the required parameter 'hl' when calling getLeagues");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'hl': hl
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/getLeagues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStandings operation.
     * @callback moduleapi/LeaguesApi~getStandingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Locale} hl 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.tournamentId The id(s) of the tournament(s) you want details ofs 
     * @param {module:api/LeaguesApi~getStandingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStandings(hl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hl' is set
      if (hl === undefined || hl === null) {
        throw new Error("Missing the required parameter 'hl' when calling getStandings");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'hl': hl,'tournamentId': this.apiClient.buildCollectionParam(opts['tournamentId'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/getStandings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTournamentsForLeague operation.
     * @callback moduleapi/LeaguesApi~getTournamentsForLeagueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Locale} hl 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.leagueId The id of the league you want details of 
     * @param {module:api/LeaguesApi~getTournamentsForLeagueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTournamentsForLeague(hl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hl' is set
      if (hl === undefined || hl === null) {
        throw new Error("Missing the required parameter 'hl' when calling getTournamentsForLeague");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'hl': hl,'leagueId': opts['leagueId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/getTournamentsForLeague', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}